#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
#
# This script configures periodic RAID scrubbing and monitoring

md_configure() {
  if [[ -z "${BIN_DIR}" ]]; then
    logError "BIN_DIR is not set"
    return 1
  fi
  if [[ -z "${CONFIG_DIR}" ]]; then
    logError "CONFIG_DIR is not set"
    return 1
  fi

  # Load email configuration
  local cfg_email="${CONFIG_DIR}/email.env"
  if ! config_load "${cfg_email}"; then
    logError "Failed to load email configuration"
    return 1
  fi

  # Script to execute on MDADM events
  local file
  file=$(
    cat <<EOF
#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
#
# Scripts that handles events generated by mdadm
# (This file was automatically generated during installation)

MDADM_EVENT="\${1}"
MDADM_DEVICE="\${2}"
MDADM_ARRAY="\${3}"

# Import email configuration
if ! source "${SETUP_REPO_DIR}/external/slf4.sh/src/slf4.sh"; then
  echo "Failed to import slf4.sh"
  exit 1
fi
if ! source "${cfg_email}"; then
  logFatal "Failed to load email configuration"
fi


SEND_XCP="true"
if ! command -v xe &>/dev/null; then
  logError "XCP-ng not detected"
  SEND_XCP=""
fi

if ! res=\$(xe host-list name-label=\$(hostname) --minimal); then
  logError "Failed to get host"
  SEND_XCP=""
elif [[ -z "\${res}" ]]; then
  logError "Host not found"
  SEND_XCP=""
elif [[ "\${res}" == *","* ]]; then
  logError "Multiple hosts found"
  SEND_XCP=""
else
  HOST_ID=\${res}
fi

# XCP-ng message levels
LVL_ERROR=1
LVL_WARN=2
LVL_INFO=3
LVL_DEBUG=4
LVL_TRACE=5

# Prepare event message
if [[ -z "\${MDADM_DEVICE}" ]]; then
  RAID_MSG="Unspecified device generated an mdadm event"
else
  RAID_MSG=\$(cat <<END
Device \${MDADM_DEVICE} generated the following event: \${MDADM_EVENT}
Details on this array:

\$(/usr/sbin/mdadm --detail \${MDADM_DEVICE})
END
)
fi

SUBJECT="[\${HOSTNAME}] RAID - \${MDADM_EVENT} on \${MDADM_DEVICE}"
MESSAGE=\$(cat <<END

Subject: \${SUBJECT}

Arguments: (\$#):"
\$(for arg in "\$@"; do echo "  \${arg}"; done)

MDADM_EVENT: "\${MDADM_EVENT}"
MDADM_DEVICE: "\${MDADM_DEVICE}"
MDADM_ARRAY: "\${MDADM_ARRAY}"

An event has been detected on \$(hostname)

\${RAID_MSG}
END
)

# Logging it
logInfo <<END
Logging a RAID event:

\${MESSAGE}
END

# Silence events that aren't considered an error or significant
case "\${MDADM_EVENT}" in
  Rebuild*)
    logInfo "Ignoring rebuild event"
    exit 0
    ;;
  DeviceDisappeared | Fail | FailSpare | SpareActive | NewArray | DegradedArray | MoveSpare | SparesMissing | TestMessage)
    logTrace "Known event: \${MDADM_EVENT}"
    ;;
  *)
    logWarn "Unknown event: \${MDADM_EVENT}"
    ;;
esac

# If we reach here, this is a significant event. Send email

echo "\${MESSAGE}" | \${MAIL_CMD} -s "\${SUBJECT}" -r \${SENDER} \${SYSADMIN}
if [[ \$? -ne 0 ]]; then
  logError "Failed to send RAID email"
  SEND_XCP=""
else
  logInfo "RAID email sent succesfully"
fi

# Send a XCP-ng notification
if [[ -z "\${SEND_XCP}" ]]; then
  logWarn "Skipping XCP-ng notification"
else
  xe message-create name="RAID" body="\${MDADM_EVENT} on \${MDADM_DEVICE}" priority=\$LVL_WARN host-uuid=\${HOST_ID}
  if [[ \$? -ne 0 ]]; then
    logError "Failed to send SMART notification to XCP-ng"
  else
    logInfo "SMART notification sent to XCP-ng"
  fi
fi

if [[ -z "\${SEND_XCP}" ]]; then
  exit 1
else
  exit 0
fi

EOF
  )

  local mdadm_file="${BIN_DIR}/mdadm_event"
  logInfo "Installing mdadm event script"
  if ! echo "${file}" >"${mdadm_file}"; then
    logWarn "Failed to install mdadm event script"
  fi
  if ! chmod +x "${mdadm_file}"; then
    logWarn "Failed to make mdadm event script executable"
  fi

  # Generate the configuration file
  local cfg_file="/etc/mdadm.conf"
  if [[ ! -f "${cfg_file}" ]]; then
    logWarn "MDADM configuration file not found: ${cfg_file}. Creating one..."
    if ! mdadm --detail --scan >"${cfg_file}"; then
      logError "Failed to generate MDADM configuration file: ${cfg_file}"
      return 1
    fi
    if [[ ! -f "${cfg_file}" ]]; then
      logError "MDADM configuration should have existed: ${cfg_file}"
      return 1
    fi
  fi

  # Add email configurations
  # shellcheck disable=SC2154
  if ! os_add_config "${cfg_file}" "MAILADDR ${SYSADMIN}"; then
    logError "Failed to add dest email to ${cfg_file}"
    return 1
  fi
  # shellcheck disable=SC2154
  if ! os_add_config "${cfg_file}" "MAILFROM ${SENDER}"; then
    logError "Failed to add from email to ${cfg_file}"
    return 1
  fi
  if ! os_add_config "${cfg_file}" "PROGRAM ${mdadm_file}"; then
    logError "Failed to add program to ${cfg_file}"
    return 1
  fi

  return 0
}

md_test() {
  if ! mdadm --monitor --scan --test; then
    logError "Failed to test MDADM monitoring"
    return 1
  fi
  return 0
}

###########################
###### Startup logic ######
###########################

# Get directory of this script
# https://stackoverflow.com/a/246128
MD_SOURCE=${BASH_SOURCE[0]}
while [[ -L "${MD_SOURCE}" ]]; do # resolve $MD_SOURCE until the file is no longer a symlink
  MD_ROOT=$(cd -P "$(dirname "${MD_SOURCE}")" >/dev/null 2>&1 && pwd)
  MD_SOURCE=$(readlink "${MD_SOURCE}")
  [[ ${MD_SOURCE} != /* ]] && MD_SOURCE=${MD_ROOT}/${MD_SOURCE} # if $MD_SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
MD_ROOT=$(cd -P "$(dirname "${MD_SOURCE}")" >/dev/null 2>&1 && pwd)
MD_ROOT=$(realpath "${MD_ROOT}/../..")

# Import dependencies
SETUP_REPO_DIR="${MD_ROOT}/external/setup"
# shellcheck disable=SC1091
if ! source "${SETUP_REPO_DIR}/external/slf4.sh/src/slf4.sh"; then
  echo "Failed to import slf4.sh"
  exit 1
fi
# shellcheck disable=SC1091
if ! source "${SETUP_REPO_DIR}/external/config.sh/src/config.sh"; then
  logFatal "Failed to import config.sh"
fi
# shellcheck disable=SC1091
if ! source "${SETUP_REPO_DIR}/src/os.sh"; then
  logFatal "Failed to import os.sh"
fi

if [[ -p /dev/stdin ]] && [[ -z ${BASH_SOURCE[0]} ]]; then
  # This script was piped
  logFatal "This script cannot be piped"
elif [[ ${BASH_SOURCE[0]} != "${0}" ]]; then
  # This script was sourced
  :
else
  # This script was executed
  md_test
fi
